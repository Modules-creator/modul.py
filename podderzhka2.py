from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from assets.antispam import antispam, admin_only
from commands.db import conn as conngdb, cursor as cursorgdb

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
class SupportStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_reply = State()

##### –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò #####

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
@antispam
async def smsadmin_start(message: types.Message):
    if message.chat.type != 'private':
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return
    
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await SupportStates.waiting_for_message.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@antispam
async def process_user_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    first_name = message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursorgdb.execute('''INSERT INTO support_messages 
                        (user_id, username, first_name, message_text, status) 
                        VALUES (?, ?, ?, ?, ?)''',
                     (user_id, username, first_name, text, 'new'))
    conngdb.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    admin_msg = (f"üÜò –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                f"üë§ @{username} | {first_name}\n"
                f"üÜî ID: {user_id}\n"
                f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
                f"–û—Ç–≤–µ—Ç–∏—Ç—å: /reply@{username}")

    from main import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    admins = get_admins()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    
    for admin in admins:
        try:
            await bot.send_message(admin, admin_msg)
        except:
            continue

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
@admin_only()
async def reply_start(message: types.Message):
    args = message.get_args()
    if not args:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply@username —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    username = args.split()[0].replace('@', '')
    await message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è @{username}:")
    await state.update_data(target_username=username)
    await SupportStates.waiting_for_reply.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
@admin_only()
async def process_admin_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data.get('target_username')
    reply_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    user_id = cursorgdb.execute('SELECT user_id FROM users WHERE username = ?', (username,)).fetchone()
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.finish()
        return

    user_id = user_id[0]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from main import bot
    try:
        await bot.send_message(user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}")
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        cursorgdb.execute('UPDATE support_messages SET status = ? WHERE user_id = ?', ('answered', user_id))
        conngdb.commit()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    await state.finish()

##### –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò #####

def get_admins():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    cursorgdb.execute('SELECT user_id FROM admins')
    return [row[0] for row in cursorgdb.fetchall()]

##### –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í #####
def register_handlers(dp: Dispatcher):
    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dp.register_message_handler(smsadmin_start, commands=['smsadmin'])
    dp.register_message_handler(process_user_message, state=SupportStates.waiting_for_message)
    
    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤
    dp.register_message_handler(reply_start, commands=['reply'])
    dp.register_message_handler(process_admin_reply, state=SupportStates.waiting_for_reply)

##### –û–ü–ò–°–ê–ù–ò–ï –ú–û–î–£–õ–Ø #####
MODULE_DESCRIPTION = {
    'name': 'üÜò –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
    'description': (
        '–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (/smsadmin)\n'
        '–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ /reply@username'
    )
}
