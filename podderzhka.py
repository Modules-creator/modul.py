from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
import logging
from config import admin, API_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class States(StatesGroup):
    item = State()  # –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    item2 = State()  # –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    item3 = State()  # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°
    item4 = State()  # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ß–°
    smsa_state = State()  # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_keyboards():
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add(types.KeyboardButton('üëë –ê–¥–º–∏–Ω–∫–∞'))

    adm = types.ReplyKeyboardMarkup(resize_keyboard=True)
    adm.add(
        types.KeyboardButton('üëø –ß–°'),
        types.KeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°'),
        types.KeyboardButton('‚ùé –£–±—Ä–∞—Ç—å –∏–∑ –ß–°')
    )
    adm.add(types.KeyboardButton('üí¨ –†–∞—Å—Å—ã–ª–∫–∞'))
    adm.add(types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥'))

    back = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back.add(types.KeyboardButton('‚è™ –û—Ç–º–µ–Ω–∞'))

    return {'menu': menu, 'adm': adm, 'back': back}

kb = get_keyboards()

def get_inline_keyboard(user_id):
    quest = types.InlineKeyboardMarkup(row_width=3)
    quest.add(
        types.InlineKeyboardButton(text='üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'{user_id}-ans'),
        types.InlineKeyboardButton(text='‚ùé –£–¥–∞–ª–∏—Ç—å', callback_data='ignor')
    )
    return quest

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def join_user(chat_id):
    q.execute(f"SELECT * FROM users WHERE user_id = {chat_id}")
    result = q.fetchall()
    if len(result) == 0:
        q.execute(f'INSERT INTO users (user_id, block) VALUES ({chat_id}, 0)')
        connection.commit()

async def antiflood(*args, **kwargs):
    m = args[0]
    if m.chat.id != admin:
        await m.answer("–°—Ä–∞–±–æ—Ç–∞–ª –∞–Ω—Ç–∏—Ñ–ª—É–¥! –ü—Ä–µ–∫—Ä–∞—Ç–∏ —Ñ–ª—É–¥–∏—Ç—å –∏ –∂–¥–∏ 3 —Å–µ–∫—É–Ω–¥—ã. –ù–∞—à –∫–∞–Ω–∞–ª - @slivmenss")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /smsa
@dp.message_handler(commands=['smsa'])
async def smsa_command(message: types.Message):
    join_user(message.chat.id)
    q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
    result = q.fetchone()
    
    if result[0] == 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", reply_markup=kb['back'])
        await States.smsa_state.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è /smsa
@dp.message_handler(state=States.smsa_state)
async def process_smsa(message: types.Message, state: FSMContext):
    if message.text == '‚è™ –û—Ç–º–µ–Ω–∞':
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb['menu'])
        await state.finish()
    else:
        await bot.send_message(
            admin,
            f"üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.mention} (ID: {message.chat.id}):\n\n{message.text}",
            reply_markup=get_inline_keyboard(message.chat.id)
        )
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=kb['menu'])
        await state.finish()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ (–∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)
@dp.message_handler(content_types=['text'], text='üëë –ê–¥–º–∏–Ω–∫–∞')
async def admin_panel(message: types.Message, state: FSMContext):
    # ... (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)

@dp.message_handler(content_types=['text'], text='‚è™ –ù–∞–∑–∞–¥')
async def back_handler(message: types.Message, state: FSMContext):
    # ... (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(smsa_command, commands=['smsa'])
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    dp.register_message_handler(admin_panel, content_types=['text'], text='üëë –ê–¥–º–∏–Ω–∫–∞')
    dp.register_message_handler(back_handler, content_types=['text'], text='‚è™ –ù–∞–∑–∞–¥')
    # ... (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤)

MODULE_DESCRIPTION = {
    'name': 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
    'description': '–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /smsa'
}

if __name__ == '__main__':
    register_handlers(dp)
    executor.start_polling(dp, skip_updates=True)
